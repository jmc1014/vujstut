/* @mixin alert-variant($background, $border, $text-color) {
  background-color: $background;
  border-color: $border;
  color: $text-color;

  hr {
    border-top-color: darken($border, 5%);
  }
  .alert-link {
    color: darken($text-color, 10%);
  }
}

@mixin progress-bar-variant($color) {
  background-color: $color;

  // Deprecated parent class requirement as of v3.2.0
  .progress-striped & {
    @include gradient-striped;
  }
} */

@mixin no-padding($side) {

    @include bp(desktop) {
        @if $side == 'all' {
            padding: 0 !important;
        } @else {
             padding-#{$side}: 0 !important;
        }
    }

    @include bp(large) {
        @if $side == 'all' {
            padding: 0 !important;
        } @else {
             padding-#{$side}: 0 !important;
        }
    }
}

@mixin no-margin($side) {

    @include bp(desktop) {
        @if $side == 'all' {
            margin: 0 !important;
        } @else {
             margin-#{$side}: 0 !important;
        }
    }

    @include bp(large) {
        @if $side == 'all' {
            margin: 0 !important;
        } @else {
             margin-#{$side}: 0 !important;
        }
    }
}

@mixin object-fit($param) {
  object-fit: #{$param};
}

@mixin li() {
  display: block;
  list-style: none;
}

@mixin cleartext() {  
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
} 
  

@mixin background-color-transparent($color, $a) {
    background-color: $color;
    background-color: rgba($color, $a);
} 

@mixin bp($point) {
    @if $point == 'sm' {
        @media (min-width: map-get($grid-breakpoints, sm)) { @content; }
    }
    @else if $point == 'md' {
        @media (min-width: map-get($grid-breakpoints, md)) { @content; }
    }
    @else if $point == 'lg' {
        @media (min-width: map-get($grid-breakpoints, lg)) { @content; }
    }
    @else if $point == 'xl' {
        @media (min-width: map-get($grid-breakpoints, xl)) { @content; }
    }
}


@mixin transition($property: transform, $duration: 1s) {
    transition: $property $duration cubic-bezier(.5,.5,.5,.5) 0s;
}

@mixin hide-text {
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

/// Slightly lighten a color 
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/// Slightly darken a color 
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@mixin make-flex() {
  display: -ms-flexbox;
  display: flex;
  // -ms-flex-wrap: wrap;
  // flex-wrap: wrap;
}


// Responsive visibility utilities

@each $bp in map-keys($grid-breakpoints) {
  .hidden-#{$bp}-up {
    @include media-breakpoint-up($bp) {
      display: none !important;
    }
  }
  .hidden-#{$bp}-down {
    @include media-breakpoint-down($bp) {
      display: none !important;
    }
  }
}